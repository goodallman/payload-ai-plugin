{"version":3,"sources":["../../../src/ai/schemas/lexicalJsonSchema.ts"],"sourcesContent":["export const documentSchema = {\r\n  type: 'object',\r\n  $schema: 'http://json-schema.org/draft-07/schema#',\r\n  additionalProperties: false,\r\n  definitions: {\r\n    // Text Node (Leaf Node)\r\n    TextNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['text'] },\r\n        detail: {\r\n          type: 'number',\r\n          description: 'Text detail flags',\r\n          enum: [\r\n            0, // No details\r\n            1, // IS_DIRECTIONLESS\r\n            2, // IS_UNMERGEABLE\r\n            3, // IS_DIRECTIONLESS + IS_UNMERGEABLE\r\n          ],\r\n          examples: [\r\n            { description: 'No special details', value: 0 },\r\n            { description: 'Directionless', value: 1 },\r\n            { description: 'Unmergeable', value: 2 },\r\n            { description: 'Directionless + Unmergeable', value: 3 },\r\n          ],\r\n        },\r\n        direction: {\r\n          type: ['string', 'null'],\r\n          enum: ['ltr', null],\r\n        },\r\n        format: {\r\n          type: 'number',\r\n          description: `Format flags for text:\r\n    0 = No format\r\n    1 = Bold\r\n    2 = Italic\r\n    3 = Bold + Italic (1|2)\r\n    4 = Strikethrough\r\n    8 = Underline\r\n    9 = Bold + Underline (1|8)\r\n    16 = Code\r\n    32 = Subscript\r\n    64 = Superscript\r\n    128 = Highlight\r\n    \r\n    Formats can be combined using binary OR (|).\r\n    Example combinations:\r\n    - Bold + Italic = 1|2 = 3\r\n    - Bold + Underline = 1|8 = 9\r\n    - Italic + Underline = 2|8 = 10\r\n    - Bold + Italic + Underline = 1|2|8 = 11`,\r\n        },\r\n        indent: { type: 'number' },\r\n        mode: {\r\n          type: 'number',\r\n          description: 'Text mode flags',\r\n          enum: [\r\n            0, // Normal\r\n            1, // Token\r\n            2, // Segmented\r\n          ],\r\n          examples: [\r\n            { description: 'Normal text', value: 0 },\r\n            { description: 'Token text', value: 1 },\r\n            { description: 'Segmented text', value: 2 },\r\n          ],\r\n        },\r\n        style: {\r\n          type: 'string',\r\n          description: 'CSS style string (e.g., \"color: red; font-size: 12px;\")',\r\n        },\r\n        text: { type: 'string' },\r\n        version: { type: 'number' },\r\n      },\r\n      required: [\r\n        'type',\r\n        'text',\r\n        'format',\r\n        'style',\r\n        'mode',\r\n        'detail',\r\n        'direction',\r\n        'indent',\r\n        'version',\r\n      ],\r\n    },\r\n    // Styled Table Cell Node\r\n    TableCellNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['tablecell'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/TextNode',\r\n          },\r\n        },\r\n        colSpan: { type: 'number' },\r\n        direction: {\r\n          type: ['string', 'null'],\r\n          enum: ['ltr', null],\r\n        },\r\n        headerState: { type: 'number' },\r\n        indent: { type: 'number' },\r\n        version: { type: 'number' },\r\n        width: {\r\n          type: ['null'],\r\n          enum: [null],\r\n        },\r\n      },\r\n      required: [\r\n        'type',\r\n        'children',\r\n        'headerState',\r\n        'colSpan',\r\n        'width',\r\n        'direction',\r\n        'indent',\r\n        'version',\r\n      ],\r\n    },\r\n    // Styled Table Row Node\r\n    TableRowNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['tablerow'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/TableCellNode',\r\n          },\r\n        },\r\n        height: { type: 'number' },\r\n      },\r\n      required: ['type', 'children', 'height'],\r\n    },\r\n    // Styled Table Node\r\n    TableNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['table'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/TableRowNode',\r\n          },\r\n        },\r\n      },\r\n      required: ['type', 'children'],\r\n    },\r\n    // Heading Node\r\n    HeadingNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['heading'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            anyOf: [{ $ref: '#/definitions/TextNode' }, { $ref: '#/definitions/LinkNode' }],\r\n          },\r\n        },\r\n        direction: {\r\n          type: ['string', 'null'],\r\n          enum: ['ltr', null],\r\n        },\r\n        indent: { type: 'number' },\r\n        tag: { type: 'string', enum: ['h1', 'h2', 'h3'] },\r\n        version: { type: 'number' },\r\n      },\r\n      required: ['type', 'tag', 'children', 'direction', 'indent', 'version'],\r\n    },\r\n    // Paragraph Node\r\n    ParagraphNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['paragraph'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            anyOf: [\r\n              { $ref: '#/definitions/TextNode' },\r\n              { $ref: '#/definitions/LinkNode' },\r\n              { $ref: '#/definitions/CodeNode' },\r\n            ],\r\n          },\r\n        },\r\n        direction: {\r\n          type: ['string', 'null'],\r\n          enum: ['ltr', null],\r\n        },\r\n        format: { type: 'string', enum: ['start', 'center', 'right'] },\r\n        indent: { type: 'number' },\r\n        textFormat: { type: 'number' },\r\n        textStyle: {\r\n          type: 'string',\r\n          description: 'CSS style string (e.g., \"color: red; font-size: 12px;\")',\r\n        },\r\n        version: { type: 'number' },\r\n      },\r\n      required: [\r\n        'type',\r\n        'children',\r\n        'direction',\r\n        'format',\r\n        'indent',\r\n        'textFormat',\r\n        'textStyle',\r\n        'version',\r\n      ],\r\n    },\r\n    // Link Node\r\n    LinkNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['link'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/TextNode',\r\n          },\r\n        },\r\n        url: { type: 'string' },\r\n      },\r\n      required: ['type', 'url', 'children'],\r\n    },\r\n    // List Item Node\r\n    ListItemNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        // NOTE: Do not change the position of \"indent\", models like gpt generate properties as they are\r\n        //  defined in schema, moving the position of property \"indent\"\r\n        //  can cause issue with schema validation while streaming generated json to lexical editor\r\n        indent: { type: 'number', enum: [0, 1] },\r\n        type: { type: 'string', enum: ['listitem'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            anyOf: [{ $ref: '#/definitions/ParagraphNode' }, { $ref: '#/definitions/ListNode' }],\r\n          },\r\n        },\r\n      },\r\n      required: ['indent', 'type', 'children'],\r\n    },\r\n    // List Node\r\n    ListNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['list'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/ListItemNode',\r\n          },\r\n        },\r\n        listType: { type: 'string', enum: ['bullet', 'number'] },\r\n      },\r\n      required: ['type', 'listType', 'children'],\r\n    },\r\n    // Quote Node\r\n    QuoteNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['quote'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            anyOf: [{ $ref: '#/definitions/TextNode' }, { $ref: '#/definitions/ParagraphNode' }],\r\n          },\r\n        },\r\n      },\r\n      required: ['type', 'children'],\r\n    },\r\n    // Code Node\r\n    CodeNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['code'] },\r\n        code: { type: 'string' },\r\n        language: { type: 'string' },\r\n      },\r\n      required: ['type', 'code', 'language'],\r\n    },\r\n    // Horizontal Rule Node\r\n    HorizontalRuleNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['horizontalrule'] },\r\n      },\r\n      required: ['type'],\r\n    },\r\n    // Image Node\r\n    ImageNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['image'] },\r\n        alt: { type: 'string' },\r\n        caption: {\r\n          type: 'array',\r\n          items: {\r\n            $ref: '#/definitions/TextNode',\r\n          },\r\n        },\r\n        src: { type: 'string' },\r\n      },\r\n      required: ['type', 'src', 'alt', 'caption'],\r\n    },\r\n    // Root Node\r\n    RootNode: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        type: { type: 'string', enum: ['root'] },\r\n        children: {\r\n          type: 'array',\r\n          items: {\r\n            anyOf: [\r\n              { $ref: '#/definitions/TextNode' },\r\n              { $ref: '#/definitions/HeadingNode' },\r\n              { $ref: '#/definitions/ParagraphNode' },\r\n              { $ref: '#/definitions/LinkNode' },\r\n              { $ref: '#/definitions/ListNode' },\r\n              { $ref: '#/definitions/QuoteNode' },\r\n              { $ref: '#/definitions/CodeNode' },\r\n              { $ref: '#/definitions/HorizontalRuleNode' },\r\n              { $ref: '#/definitions/ImageNode' },\r\n              { $ref: '#/definitions/TableNode' },\r\n            ],\r\n          },\r\n        },\r\n        direction: {\r\n          type: ['string', 'null'],\r\n          enum: ['ltr', null],\r\n        },\r\n        indent: { type: 'number' },\r\n        version: { type: 'number' },\r\n      },\r\n      required: ['type', 'children', 'direction', 'indent', 'version'],\r\n    },\r\n  },\r\n  properties: {\r\n    root: {\r\n      $ref: '#/definitions/RootNode',\r\n    },\r\n  },\r\n  required: ['root'],\r\n}\r\n\r\nexport const lexicalJsonSchema = (customNodes = []) => {\r\n  const schema = structuredClone(documentSchema)\r\n\r\n  if (Array.isArray(customNodes) && customNodes.length > 0) {\r\n    customNodes.forEach((nodeObj) => {\r\n      for (const [nodeName, nodeDefinition] of Object.entries(nodeObj)) {\r\n        schema.definitions[nodeName] = nodeDefinition\r\n        const anyOfList = schema?.definitions?.RootNode?.properties?.children?.items?.anyOf\r\n\r\n        anyOfList.push({ $ref: `#/definitions/${nodeName}` })\r\n      }\r\n    })\r\n  }\r\n\r\n  return schema\r\n}\r\n"],"names":["documentSchema","type","$schema","additionalProperties","definitions","TextNode","properties","enum","detail","description","examples","value","direction","format","indent","mode","style","text","version","required","TableCellNode","children","items","$ref","colSpan","headerState","width","TableRowNode","height","TableNode","HeadingNode","anyOf","tag","ParagraphNode","textFormat","textStyle","LinkNode","url","ListItemNode","ListNode","listType","QuoteNode","CodeNode","code","language","HorizontalRuleNode","ImageNode","alt","caption","src","RootNode","root","lexicalJsonSchema","customNodes","schema","structuredClone","Array","isArray","length","forEach","nodeObj","nodeName","nodeDefinition","Object","entries","anyOfList","push"],"mappings":"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"}