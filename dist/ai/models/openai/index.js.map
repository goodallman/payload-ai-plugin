{"version":3,"sources":["../../../../src/ai/models/openai/index.ts"],"sourcesContent":["import type { SpeechCreateParams } from 'openai/resources/audio/speech'\r\nimport type { File } from 'payload'\r\n\r\nimport { streamText } from 'ai'\r\n\r\nimport type { GenerationConfig } from '../../../types.js'\r\n\r\nimport { defaultSystemPrompt } from '../../prompts.js'\r\nimport { generateFileNameByPrompt } from '../../utils/generateFileNameByPrompt.js'\r\nimport { generateImage } from './generateImage.js'\r\nimport { generateRichText } from './generateRichText.js'\r\nimport { generateVoice } from './generateVoice.js'\r\nimport { openai } from './openai.js'\r\n\r\nconst MODEL_KEY = 'Oai'\r\n\r\n//TODO: Simplify this file by moving the handlers to separate files and remove duplicate code\r\nexport const OpenAIConfig: GenerationConfig = {\r\n  models: [\r\n    {\r\n      id: `${MODEL_KEY}-text`,\r\n      name: 'OpenAI GPT Text',\r\n      fields: ['text', 'textarea'],\r\n      handler: async (\r\n        prompt: string,\r\n        options: { locale: string; model: string; system: string },\r\n      ) => {\r\n        const streamTextResult = await streamText({\r\n          model: openai(options.model),\r\n          prompt,\r\n          system: options.system || defaultSystemPrompt,\r\n        })\r\n\r\n        return streamTextResult.toDataStreamResponse()\r\n      },\r\n      output: 'text',\r\n      settings: {\r\n        name: `${MODEL_KEY}-text-settings`,\r\n        type: 'group',\r\n        admin: {\r\n          condition(data) {\r\n            return data['model-id'] === `${MODEL_KEY}-text`\r\n          },\r\n        },\r\n        fields: [\r\n          {\r\n            name: 'model',\r\n            type: 'select',\r\n            defaultValue: 'gpt-4o-mini',\r\n            label: 'Model',\r\n            options: ['gpt-4o', 'gpt-4-turbo', 'gpt-4o-mini', 'gpt-3.5-turbo'],\r\n          },\r\n        ],\r\n        label: 'OpenAI GPT Settings',\r\n      },\r\n    },\r\n    {\r\n      id: 'dall-e',\r\n      name: 'OpenAI DALL-E',\r\n      fields: ['upload'],\r\n      handler: async (prompt: string, options) => {\r\n        const imageData = await generateImage(prompt, options)\r\n        return {\r\n          data: {\r\n            alt: imageData.alt,\r\n          },\r\n          file: {\r\n            name: `image_${generateFileNameByPrompt(imageData.alt || prompt)}.jpeg`,\r\n            data: imageData.buffer,\r\n            mimetype: 'image/jpeg',\r\n            size: imageData.buffer.byteLength,\r\n          } as File,\r\n        }\r\n      },\r\n      output: 'image',\r\n      settings: {\r\n        name: 'dalle-e-settings',\r\n        type: 'group',\r\n        admin: {\r\n          condition(data) {\r\n            return data['model-id'] === 'dall-e'\r\n          },\r\n        },\r\n        fields: [\r\n          {\r\n            name: 'version',\r\n            type: 'select',\r\n            defaultValue: 'dall-e-3',\r\n            label: 'Version',\r\n            options: ['dall-e-3', 'dall-e-2'],\r\n          },\r\n          {\r\n            type: 'row',\r\n            fields: [\r\n              {\r\n                name: 'size',\r\n                type: 'select',\r\n                defaultValue: '1024x1024',\r\n                label: 'Size',\r\n                options: ['256x256', '512x512', '1024x1024', '1792x1024', '1024x1792'],\r\n              },\r\n              {\r\n                name: 'style',\r\n                type: 'select',\r\n                defaultValue: 'natural',\r\n                label: 'Style',\r\n                options: ['vivid', 'natural'],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            name: 'enable-prompt-optimization',\r\n            type: 'checkbox',\r\n            label: 'Optimize prompt',\r\n          },\r\n        ],\r\n        label: 'OpenAI DALL-E Settings',\r\n      },\r\n    },\r\n    {\r\n      id: 'tts',\r\n      name: 'OpenAI Text-to-Speech',\r\n      fields: ['upload'],\r\n      handler: async (text: string, options) => {\r\n        //TODO: change it to open ai text to speech api\r\n        const voiceData = await generateVoice(text, options)\r\n        return {\r\n          data: {\r\n            alt: text,\r\n          },\r\n          file: {\r\n            name: `voice_${generateFileNameByPrompt(text)}.mp3`,\r\n            data: voiceData.buffer,\r\n            mimetype: 'audio/mp3',\r\n            size: voiceData.buffer.byteLength,\r\n          } as File,\r\n        }\r\n      },\r\n      output: 'audio',\r\n      settings: {\r\n        name: `${MODEL_KEY}-tts-settings`,\r\n        type: 'group',\r\n        admin: {\r\n          condition(data) {\r\n            return data['model-id'] === 'tts'\r\n          },\r\n        },\r\n        fields: [\r\n          {\r\n            name: 'voice',\r\n            type: 'select',\r\n            defaultValue: 'alloy',\r\n            label: 'Voice',\r\n            options: ['alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer'] as Array<\r\n              SpeechCreateParams['voice']\r\n            >,\r\n          },\r\n          {\r\n            name: 'model',\r\n            type: 'select',\r\n            defaultValue: 'tts-1',\r\n            label: 'Model',\r\n            options: ['tts-1', 'tts-1-hd'] as Array<SpeechCreateParams['model']>,\r\n          },\r\n          {\r\n            name: 'response_format',\r\n            type: 'select',\r\n            defaultValue: 'mp3',\r\n            label: 'Response Format',\r\n            options: ['mp3', 'opus', 'aac', 'flac', 'wav', 'pcm'] as Array<\r\n              SpeechCreateParams['response_format']\r\n            >,\r\n          },\r\n          {\r\n            name: 'speed',\r\n            type: 'number',\r\n            defaultValue: 1,\r\n            label: 'Speed',\r\n            max: 4,\r\n            min: 0.25,\r\n          },\r\n        ],\r\n        label: 'OpenAI Text-to-Speech Settings',\r\n      },\r\n    },\r\n    {\r\n      id: `${MODEL_KEY}-object`,\r\n      name: 'OpenAI GPT',\r\n      fields: ['richText'],\r\n      handler: (text: string, options) => {\r\n        return generateRichText(text, options)\r\n      },\r\n      output: 'text',\r\n      settings: {\r\n        name: `${MODEL_KEY}-object-settings`,\r\n        type: 'group',\r\n        admin: {\r\n          condition(data) {\r\n            return data['model-id'] === `${MODEL_KEY}-object`\r\n          },\r\n        },\r\n        fields: [\r\n          {\r\n            name: 'model',\r\n            type: 'select',\r\n            defaultValue: 'gpt-4o-2024-08-06',\r\n            label: 'Model',\r\n            options: ['gpt-4o', 'gpt-4-turbo', 'gpt-4o-mini', 'gpt-4o-2024-08-06'],\r\n          },\r\n        ],\r\n        label: 'OpenAI GPT Settings',\r\n      },\r\n    },\r\n  ],\r\n  provider: 'OpenAI',\r\n}\r\n"],"names":["streamText","defaultSystemPrompt","generateFileNameByPrompt","generateImage","generateRichText","generateVoice","openai","MODEL_KEY","OpenAIConfig","models","id","name","fields","handler","prompt","options","streamTextResult","model","system","toDataStreamResponse","output","settings","type","admin","condition","data","defaultValue","label","imageData","alt","file","buffer","mimetype","size","byteLength","text","voiceData","max","min","provider"],"mappings":"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"}