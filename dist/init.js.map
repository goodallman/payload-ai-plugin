{"version":3,"sources":["../src/init.ts"],"sourcesContent":["import type { Payload } from 'payload'\r\n\r\nimport type { PluginConfig } from './types.js'\r\n\r\nimport { seedPrompts } from './ai/prompts.js'\r\nimport { systemGenerate } from './ai/utils/systemGenerate.js'\r\nimport { PLUGIN_INSTRUCTIONS_TABLE } from './defaults.js'\r\nimport { getGenerationModels } from './utilities/getGenerationModels.js'\r\n\r\nexport const init = async (payload: Payload, fieldSchemaPaths, pluginConfig: PluginConfig) => {\r\n  if (pluginConfig.debugging) {\r\n    payload.logger.info(`â€” AI Plugin: Initializing...`)\r\n  }\r\n\r\n  const paths = Object.keys(fieldSchemaPaths)\r\n\r\n  const fieldInstructionsMap = {}\r\n  for (let i = 0; i < paths.length; i++) {\r\n    const path = paths[i]\r\n    const { type: fieldType, label: fieldLabel, relationTo } = fieldSchemaPaths[path]\r\n    const entry = await payload.find({\r\n      collection: PLUGIN_INSTRUCTIONS_TABLE,\r\n      pagination: false,\r\n      where: {\r\n        'field-type': {\r\n          equals: fieldType,\r\n        },\r\n        'schema-path': {\r\n          equals: path,\r\n        },\r\n      },\r\n    })\r\n\r\n    if (!entry?.docs?.length) {\r\n      const { prompt, system } = seedPrompts({\r\n        fieldLabel,\r\n        fieldSchemaPaths,\r\n        fieldType,\r\n        path,\r\n      })\r\n\r\n      let generatedPrompt = '{{ title }}'\r\n      if (pluginConfig.generatePromptOnInit) {\r\n        // find the model that has the generateText function\r\n        const model = getGenerationModels(pluginConfig).find((model) => model.generateText)\r\n        generatedPrompt = await systemGenerate(\r\n          {\r\n            prompt,\r\n            system,\r\n          },\r\n          model?.generateText,\r\n        )\r\n        payload.logger.info(\r\n          `\\nPrompt generated for \"${fieldLabel}\" field:\\nprompt: ${generatedPrompt}\\n\\n`,\r\n        )\r\n      }\r\n\r\n      const instructions = await payload\r\n        .create({\r\n          collection: PLUGIN_INSTRUCTIONS_TABLE,\r\n          data: {\r\n            'field-type': fieldType,\r\n            'model-id': getGenerationModels(pluginConfig).find((a) => {\r\n              return a.fields.includes(fieldType)\r\n            })?.id,\r\n            prompt: generatedPrompt,\r\n            'relation-to': relationTo,\r\n            'schema-path': path,\r\n          },\r\n        })\r\n        .then((a) => a)\r\n        .catch((err) => {\r\n          payload.logger.error('â€” AI Plugin: Error creating Compose settings-', err)\r\n        })\r\n\r\n      // @ts-expect-error\r\n      if (instructions?.id) {\r\n        fieldInstructionsMap[path] = {\r\n          id: instructions.id,\r\n          fieldType,\r\n        }\r\n      }\r\n    } else {\r\n      const [instructions] = entry.docs\r\n      fieldInstructionsMap[path] = {\r\n        id: instructions.id,\r\n        fieldType,\r\n      }\r\n    }\r\n  }\r\n\r\n  if (pluginConfig.debugging) {\r\n    payload.logger.info(\r\n      `â€” AI Plugin: Enabled fields map: ${JSON.stringify(fieldInstructionsMap, null, 2)}`,\r\n    )\r\n    payload.logger.info(`â€” AI Plugin: Initialized!`)\r\n  }\r\n\r\n  if (pluginConfig.generatePromptOnInit) {\r\n    payload.logger.info(\r\n      '\\n\\n-AI Plugin: Example prompts are added to get you started, Now go break some code ðŸš€ðŸš€ðŸš€\\n\\n',\r\n    )\r\n  }\r\n}\r\n"],"names":["seedPrompts","systemGenerate","PLUGIN_INSTRUCTIONS_TABLE","getGenerationModels","init","payload","fieldSchemaPaths","pluginConfig","debugging","logger","info","paths","Object","keys","fieldInstructionsMap","i","length","path","type","fieldType","label","fieldLabel","relationTo","entry","find","collection","pagination","where","equals","docs","prompt","system","generatedPrompt","generatePromptOnInit","model","generateText","instructions","create","data","a","fields","includes","id","then","catch","err","error","JSON","stringify"],"mappings":"AAIA,SAASA,WAAW,QAAQ,kBAAiB;AAC7C,SAASC,cAAc,QAAQ,+BAA8B;AAC7D,SAASC,yBAAyB,QAAQ,gBAAe;AACzD,SAASC,mBAAmB,QAAQ,qCAAoC;AAExE,OAAO,MAAMC,OAAO,OAAOC,SAAkBC,kBAAkBC;IAC7D,IAAIA,aAAaC,SAAS,EAAE;QAC1BH,QAAQI,MAAM,CAACC,IAAI,CAAC,CAAC,4BAA4B,CAAC;IACpD;IAEA,MAAMC,QAAQC,OAAOC,IAAI,CAACP;IAE1B,MAAMQ,uBAAuB,CAAC;IAC9B,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,MAAMK,MAAM,EAAED,IAAK;QACrC,MAAME,OAAON,KAAK,CAACI,EAAE;QACrB,MAAM,EAAEG,MAAMC,SAAS,EAAEC,OAAOC,UAAU,EAAEC,UAAU,EAAE,GAAGhB,gBAAgB,CAACW,KAAK;QACjF,MAAMM,QAAQ,MAAMlB,QAAQmB,IAAI,CAAC;YAC/BC,YAAYvB;YACZwB,YAAY;YACZC,OAAO;gBACL,cAAc;oBACZC,QAAQT;gBACV;gBACA,eAAe;oBACbS,QAAQX;gBACV;YACF;QACF;QAEA,IAAI,CAACM,OAAOM,MAAMb,QAAQ;YACxB,MAAM,EAAEc,MAAM,EAAEC,MAAM,EAAE,GAAG/B,YAAY;gBACrCqB;gBACAf;gBACAa;gBACAF;YACF;YAEA,IAAIe,kBAAkB;YACtB,IAAIzB,aAAa0B,oBAAoB,EAAE;gBACrC,oDAAoD;gBACpD,MAAMC,QAAQ/B,oBAAoBI,cAAciB,IAAI,CAAC,CAACU,QAAUA,MAAMC,YAAY;gBAClFH,kBAAkB,MAAM/B,eACtB;oBACE6B;oBACAC;gBACF,GACAG,OAAOC;gBAET9B,QAAQI,MAAM,CAACC,IAAI,CACjB,CAAC,wBAAwB,EAAEW,WAAW,kBAAkB,EAAEW,gBAAgB,IAAI,CAAC;YAEnF;YAEA,MAAMI,eAAe,MAAM/B,QACxBgC,MAAM,CAAC;gBACNZ,YAAYvB;gBACZoC,MAAM;oBACJ,cAAcnB;oBACd,YAAYhB,oBAAoBI,cAAciB,IAAI,CAAC,CAACe;wBAClD,OAAOA,EAAEC,MAAM,CAACC,QAAQ,CAACtB;oBAC3B,IAAIuB;oBACJZ,QAAQE;oBACR,eAAeV;oBACf,eAAeL;gBACjB;YACF,GACC0B,IAAI,CAAC,CAACJ,IAAMA,GACZK,KAAK,CAAC,CAACC;gBACNxC,QAAQI,MAAM,CAACqC,KAAK,CAAC,iDAAiDD;YACxE;YAEF,mBAAmB;YACnB,IAAIT,cAAcM,IAAI;gBACpB5B,oBAAoB,CAACG,KAAK,GAAG;oBAC3ByB,IAAIN,aAAaM,EAAE;oBACnBvB;gBACF;YACF;QACF,OAAO;YACL,MAAM,CAACiB,aAAa,GAAGb,MAAMM,IAAI;YACjCf,oBAAoB,CAACG,KAAK,GAAG;gBAC3ByB,IAAIN,aAAaM,EAAE;gBACnBvB;YACF;QACF;IACF;IAEA,IAAIZ,aAAaC,SAAS,EAAE;QAC1BH,QAAQI,MAAM,CAACC,IAAI,CACjB,CAAC,iCAAiC,EAAEqC,KAAKC,SAAS,CAAClC,sBAAsB,MAAM,GAAG,CAAC;QAErFT,QAAQI,MAAM,CAACC,IAAI,CAAC,CAAC,yBAAyB,CAAC;IACjD;IAEA,IAAIH,aAAa0B,oBAAoB,EAAE;QACrC5B,QAAQI,MAAM,CAACC,IAAI,CACjB;IAEJ;AACF,EAAC"}