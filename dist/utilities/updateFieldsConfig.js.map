{"version":3,"sources":["../../src/utilities/updateFieldsConfig.ts"],"sourcesContent":["import type { CollectionConfig } from 'payload'\r\n\r\ninterface UpdateFieldsConfig {\r\n  schemaPathMap: Record<string, string>\r\n  updatedCollectionConfig: CollectionConfig\r\n}\r\n\r\nexport const updateFieldsConfig = (collectionConfig: CollectionConfig): UpdateFieldsConfig => {\r\n  let schemaPathMap = {}\r\n\r\n  function updateField(field: any, parentPath = ''): any {\r\n    const currentPath = parentPath ? `${parentPath}.${field.name}` : field.name\r\n    const currentSchemaPath = `${collectionConfig.slug}.${currentPath}`\r\n\r\n    // Disabled fields/ field types\r\n    if (\r\n      field.admin?.disabled ||\r\n      field.admin?.readOnly ||\r\n      field.admin?.hidden ||\r\n      field.type === 'row'\r\n    ) {\r\n      return field\r\n    }\r\n\r\n    // Map field path for global fieldInstructionsMap to load related instructions\r\n    // This is done due to save extra API call to get instructions when Field components are loaded in admin\r\n    // Doing is will only call instructions data when user clicks on settings\r\n    if (['richText', 'text', 'textarea', 'upload'].includes(field.type)) {\r\n      schemaPathMap = {\r\n        ...schemaPathMap,\r\n        [currentSchemaPath]: {\r\n          type: field.type,\r\n          label: field.label || field.name,\r\n          relationTo: field.relationTo,\r\n        },\r\n      }\r\n    }\r\n\r\n    // Inject AI actions, richText is not included here as it has to be explicitly defined by user\r\n    if (['text', 'textarea', 'upload'].includes(field.type)) {\r\n      let customField = {}\r\n\r\n      // Custom fields don't fully adhere to the Payload schema, making it difficult to\r\n      // determine which components support injecting ComposeField as a Description.\r\n      if (field.admin?.components?.Field || field.admin?.components?.Description) {\r\n        // TODO: Do something?\r\n        customField = {}\r\n      }\r\n\r\n      return {\r\n        ...field,\r\n        admin: {\r\n          ...field.admin,\r\n          components: {\r\n            ...(field.admin?.components || {}),\r\n            Description: '@ai-stack/payloadcms/fields#ComposeField',\r\n            ...customField,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    if (field.fields) {\r\n      return {\r\n        ...field,\r\n        fields: field.fields.map((subField: any) => updateField(subField, currentPath)),\r\n      }\r\n    }\r\n\r\n    if (field.tabs) {\r\n      return {\r\n        ...field,\r\n        tabs: field.tabs.map((tab: any) => {\r\n          return {\r\n            ...tab,\r\n            fields: tab.fields.map((subField: any) => updateField(subField, tab.name)),\r\n          }\r\n        }),\r\n      }\r\n    }\r\n\r\n    if (field.blocks) {\r\n      return {\r\n        ...field,\r\n        blocks: field.blocks.map((block: any) => ({\r\n          ...block,\r\n          fields: block.fields.map((subField: any) =>\r\n            updateField(subField, `${currentPath}.${block.slug}`),\r\n          ),\r\n        })),\r\n      }\r\n    }\r\n\r\n    return field\r\n  }\r\n\r\n  const updatedCollectionConfig = {\r\n    ...collectionConfig,\r\n    fields: collectionConfig.fields.map((field) => updateField(field)),\r\n  }\r\n\r\n  return {\r\n    schemaPathMap,\r\n    updatedCollectionConfig,\r\n  }\r\n}\r\n"],"names":["updateFieldsConfig","collectionConfig","schemaPathMap","updateField","field","parentPath","currentPath","name","currentSchemaPath","slug","admin","disabled","readOnly","hidden","type","includes","label","relationTo","customField","components","Field","Description","fields","map","subField","tabs","tab","blocks","block","updatedCollectionConfig"],"mappings":"AAOA,OAAO,MAAMA,qBAAqB,CAACC;IACjC,IAAIC,gBAAgB,CAAC;IAErB,SAASC,YAAYC,KAAU,EAAEC,aAAa,EAAE;QAC9C,MAAMC,cAAcD,aAAa,CAAC,EAAEA,WAAW,CAAC,EAAED,MAAMG,IAAI,CAAC,CAAC,GAAGH,MAAMG,IAAI;QAC3E,MAAMC,oBAAoB,CAAC,EAAEP,iBAAiBQ,IAAI,CAAC,CAAC,EAAEH,YAAY,CAAC;QAEnE,+BAA+B;QAC/B,IACEF,MAAMM,KAAK,EAAEC,YACbP,MAAMM,KAAK,EAAEE,YACbR,MAAMM,KAAK,EAAEG,UACbT,MAAMU,IAAI,KAAK,OACf;YACA,OAAOV;QACT;QAEA,8EAA8E;QAC9E,wGAAwG;QACxG,yEAAyE;QACzE,IAAI;YAAC;YAAY;YAAQ;YAAY;SAAS,CAACW,QAAQ,CAACX,MAAMU,IAAI,GAAG;YACnEZ,gBAAgB;gBACd,GAAGA,aAAa;gBAChB,CAACM,kBAAkB,EAAE;oBACnBM,MAAMV,MAAMU,IAAI;oBAChBE,OAAOZ,MAAMY,KAAK,IAAIZ,MAAMG,IAAI;oBAChCU,YAAYb,MAAMa,UAAU;gBAC9B;YACF;QACF;QAEA,8FAA8F;QAC9F,IAAI;YAAC;YAAQ;YAAY;SAAS,CAACF,QAAQ,CAACX,MAAMU,IAAI,GAAG;YACvD,IAAII,cAAc,CAAC;YAEnB,iFAAiF;YACjF,8EAA8E;YAC9E,IAAId,MAAMM,KAAK,EAAES,YAAYC,SAAShB,MAAMM,KAAK,EAAES,YAAYE,aAAa;gBAC1E,sBAAsB;gBACtBH,cAAc,CAAC;YACjB;YAEA,OAAO;gBACL,GAAGd,KAAK;gBACRM,OAAO;oBACL,GAAGN,MAAMM,KAAK;oBACdS,YAAY;wBACV,GAAIf,MAAMM,KAAK,EAAES,cAAc,CAAC,CAAC;wBACjCE,aAAa;wBACb,GAAGH,WAAW;oBAChB;gBACF;YACF;QACF;QAEA,IAAId,MAAMkB,MAAM,EAAE;YAChB,OAAO;gBACL,GAAGlB,KAAK;gBACRkB,QAAQlB,MAAMkB,MAAM,CAACC,GAAG,CAAC,CAACC,WAAkBrB,YAAYqB,UAAUlB;YACpE;QACF;QAEA,IAAIF,MAAMqB,IAAI,EAAE;YACd,OAAO;gBACL,GAAGrB,KAAK;gBACRqB,MAAMrB,MAAMqB,IAAI,CAACF,GAAG,CAAC,CAACG;oBACpB,OAAO;wBACL,GAAGA,GAAG;wBACNJ,QAAQI,IAAIJ,MAAM,CAACC,GAAG,CAAC,CAACC,WAAkBrB,YAAYqB,UAAUE,IAAInB,IAAI;oBAC1E;gBACF;YACF;QACF;QAEA,IAAIH,MAAMuB,MAAM,EAAE;YAChB,OAAO;gBACL,GAAGvB,KAAK;gBACRuB,QAAQvB,MAAMuB,MAAM,CAACJ,GAAG,CAAC,CAACK,QAAgB,CAAA;wBACxC,GAAGA,KAAK;wBACRN,QAAQM,MAAMN,MAAM,CAACC,GAAG,CAAC,CAACC,WACxBrB,YAAYqB,UAAU,CAAC,EAAElB,YAAY,CAAC,EAAEsB,MAAMnB,IAAI,CAAC,CAAC;oBAExD,CAAA;YACF;QACF;QAEA,OAAOL;IACT;IAEA,MAAMyB,0BAA0B;QAC9B,GAAG5B,gBAAgB;QACnBqB,QAAQrB,iBAAiBqB,MAAM,CAACC,GAAG,CAAC,CAACnB,QAAUD,YAAYC;IAC7D;IAEA,OAAO;QACLF;QACA2B;IACF;AACF,EAAC"}