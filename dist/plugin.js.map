{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { Config } from 'payload'\r\n\r\nimport { deepMerge } from 'payload/shared'\r\n\r\nimport type { PluginConfig } from './types.js'\r\n\r\nimport { defaultGenerationModels } from './ai/models/index.js'\r\nimport { lexicalJsonSchema } from './ai/schemas/lexicalJsonSchema.js'\r\nimport { instructionsCollection } from './collections/Instructions.js'\r\nimport { PLUGIN_NAME } from './defaults.js'\r\nimport { fetchFields } from './endpoints/fetchFields.js'\r\nimport { endpoints } from './endpoints/index.js'\r\nimport { init } from './init.js'\r\nimport { translations } from './translations/index.js'\r\nimport { getGenerationModels } from './utilities/getGenerationModels.js'\r\nimport { isPluginActivated } from './utilities/isPluginActivated.js'\r\nimport { updateFieldsConfig } from './utilities/updateFieldsConfig.js'\r\n\r\nconst defaultPluginConfig: PluginConfig = {\r\n  collections: {},\r\n  disableSponsorMessage: false,\r\n  generatePromptOnInit: true,\r\n  generationModels: defaultGenerationModels,\r\n}\r\n\r\nconst sponsorMessage = `\r\n╔═══════════════════════════════════════════════════════════════╗\r\n║       THANK YOU FOR USING THE PAYLOAD AI PLUGIN!              ║\r\n║                                                               ║\r\n║  If this plugin makes your life easier, please                ║\r\n║  consider supporting its development and maintenance:         ║\r\n║                                                               ║\r\n║    • Buy me a coffee: https://buymeacoffee.com/ashbuilds      ║\r\n║    • Sponsor on GitHub: https://github.com/sponsors/ashbuilds ║\r\n║                                                               ║\r\n║  Your support fuels continued improvements,                   ║\r\n║  new features, and more caffeinated coding sessions! ☕        ║\r\n║                                                               ║\r\n║  Got feedback or need help? Submit an issue here:             ║\r\n║    • https://github.com/ashbuilds/payload-ai/issues/new       ║\r\n║                                                               ║\r\n║  Thank you again, and happy building!                         ║\r\n╚═══════════════════════════════════════════════════════════════╝\r\n`\r\n\r\nconst payloadAiPlugin =\r\n  (pluginConfig: PluginConfig) =>\r\n  (incomingConfig: Config): Config => {\r\n    pluginConfig = { ...defaultPluginConfig, ...pluginConfig }\r\n    pluginConfig.generationModels = getGenerationModels(pluginConfig)\r\n    const isActivated = isPluginActivated(pluginConfig)\r\n    let updatedConfig: Config = { ...incomingConfig }\r\n    let collectionsFieldPathMap = {}\r\n    if (isActivated) {\r\n      const Instructions = instructionsCollection(pluginConfig)\r\n      // Inject editor schema to config, so that it can be accessed when /textarea endpoint will hit\r\n      const lexicalSchema = lexicalJsonSchema(pluginConfig.editorConfig?.nodes)\r\n\r\n      if (pluginConfig.debugging) {\r\n        Instructions.admin.hidden = false\r\n      }\r\n\r\n      Instructions.admin.custom = {\r\n        ...(Instructions.admin.custom || {}),\r\n        [PLUGIN_NAME]: {\r\n          editorConfig: {\r\n            // Used in admin client for useObject hook\r\n            schema: lexicalSchema,\r\n          },\r\n        },\r\n      }\r\n\r\n      const collections = [...(incomingConfig.collections ?? []), Instructions]\r\n      const { collections: collectionSlugs = [] } = pluginConfig\r\n\r\n      const { components: { providers = [] } = {} } = incomingConfig.admin || {}\r\n      const updatedProviders = [\r\n        ...(providers ?? []),\r\n        {\r\n          path: '@ai-stack/payloadcms/client#InstructionsProvider',\r\n        },\r\n      ]\r\n\r\n      incomingConfig.admin = {\r\n        ...(incomingConfig.admin || {}),\r\n        components: {\r\n          ...(incomingConfig.admin?.components ?? {}),\r\n          providers: updatedProviders,\r\n        },\r\n      }\r\n\r\n      const pluginEndpoints = endpoints(pluginConfig)\r\n      updatedConfig = {\r\n        ...incomingConfig,\r\n        collections: collections.map((collection) => {\r\n          if (collectionSlugs[collection.slug]) {\r\n            const { schemaPathMap, updatedCollectionConfig } = updateFieldsConfig(collection)\r\n            collectionsFieldPathMap = {\r\n              ...collectionsFieldPathMap,\r\n              ...schemaPathMap,\r\n            }\r\n            return updatedCollectionConfig\r\n          }\r\n\r\n          return collection\r\n        }),\r\n        endpoints: [\r\n          ...(incomingConfig.endpoints ?? []),\r\n          pluginEndpoints.textarea,\r\n          pluginEndpoints.upload,\r\n          fetchFields(pluginConfig.access),\r\n        ],\r\n        i18n: {\r\n          ...(incomingConfig.i18n || {}),\r\n          translations: {\r\n            ...deepMerge(translations, incomingConfig.i18n?.translations ?? {}),\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    updatedConfig.onInit = async (payload) => {\r\n      if (incomingConfig.onInit) await incomingConfig.onInit(payload)\r\n\r\n      if (!isActivated) {\r\n        payload.logger.warn(`— AI Plugin: Not activated. Please verify your environment keys.`)\r\n        return\r\n      }\r\n\r\n      await init(payload, collectionsFieldPathMap, pluginConfig)\r\n        .catch((error) => {\r\n          console.error(error)\r\n          payload.logger.error(`— AI Plugin: Initialization Error: ${error}`)\r\n        })\r\n        .finally(() => {\r\n          if (!pluginConfig.disableSponsorMessage) {\r\n            setTimeout(() => {\r\n              payload.logger.info(sponsorMessage)\r\n            }, 3000)\r\n          }\r\n        })\r\n    }\r\n\r\n    return updatedConfig\r\n  }\r\n\r\nexport { payloadAiPlugin }\r\n"],"names":["deepMerge","defaultGenerationModels","lexicalJsonSchema","instructionsCollection","PLUGIN_NAME","fetchFields","endpoints","init","translations","getGenerationModels","isPluginActivated","updateFieldsConfig","defaultPluginConfig","collections","disableSponsorMessage","generatePromptOnInit","generationModels","sponsorMessage","payloadAiPlugin","pluginConfig","incomingConfig","isActivated","updatedConfig","collectionsFieldPathMap","Instructions","lexicalSchema","editorConfig","nodes","debugging","admin","hidden","custom","schema","collectionSlugs","components","providers","updatedProviders","path","pluginEndpoints","map","collection","slug","schemaPathMap","updatedCollectionConfig","textarea","upload","access","i18n","onInit","payload","logger","warn","catch","error","console","finally","setTimeout","info"],"mappings":"AAEA,SAASA,SAAS,QAAQ,iBAAgB;AAI1C,SAASC,uBAAuB,QAAQ,uBAAsB;AAC9D,SAASC,iBAAiB,QAAQ,oCAAmC;AACrE,SAASC,sBAAsB,QAAQ,gCAA+B;AACtE,SAASC,WAAW,QAAQ,gBAAe;AAC3C,SAASC,WAAW,QAAQ,6BAA4B;AACxD,SAASC,SAAS,QAAQ,uBAAsB;AAChD,SAASC,IAAI,QAAQ,YAAW;AAChC,SAASC,YAAY,QAAQ,0BAAyB;AACtD,SAASC,mBAAmB,QAAQ,qCAAoC;AACxE,SAASC,iBAAiB,QAAQ,mCAAkC;AACpE,SAASC,kBAAkB,QAAQ,oCAAmC;AAEtE,MAAMC,sBAAoC;IACxCC,aAAa,CAAC;IACdC,uBAAuB;IACvBC,sBAAsB;IACtBC,kBAAkBf;AACpB;AAEA,MAAMgB,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;AAkBxB,CAAC;AAED,MAAMC,kBACJ,CAACC,eACD,CAACC;QACCD,eAAe;YAAE,GAAGP,mBAAmB;YAAE,GAAGO,YAAY;QAAC;QACzDA,aAAaH,gBAAgB,GAAGP,oBAAoBU;QACpD,MAAME,cAAcX,kBAAkBS;QACtC,IAAIG,gBAAwB;YAAE,GAAGF,cAAc;QAAC;QAChD,IAAIG,0BAA0B,CAAC;QAC/B,IAAIF,aAAa;YACf,MAAMG,eAAerB,uBAAuBgB;YAC5C,8FAA8F;YAC9F,MAAMM,gBAAgBvB,kBAAkBiB,aAAaO,YAAY,EAAEC;YAEnE,IAAIR,aAAaS,SAAS,EAAE;gBAC1BJ,aAAaK,KAAK,CAACC,MAAM,GAAG;YAC9B;YAEAN,aAAaK,KAAK,CAACE,MAAM,GAAG;gBAC1B,GAAIP,aAAaK,KAAK,CAACE,MAAM,IAAI,CAAC,CAAC;gBACnC,CAAC3B,YAAY,EAAE;oBACbsB,cAAc;wBACZ,0CAA0C;wBAC1CM,QAAQP;oBACV;gBACF;YACF;YAEA,MAAMZ,cAAc;mBAAKO,eAAeP,WAAW,IAAI,EAAE;gBAAGW;aAAa;YACzE,MAAM,EAAEX,aAAaoB,kBAAkB,EAAE,EAAE,GAAGd;YAE9C,MAAM,EAAEe,YAAY,EAAEC,YAAY,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAGf,eAAeS,KAAK,IAAI,CAAC;YACzE,MAAMO,mBAAmB;mBACnBD,aAAa,EAAE;gBACnB;oBACEE,MAAM;gBACR;aACD;YAEDjB,eAAeS,KAAK,GAAG;gBACrB,GAAIT,eAAeS,KAAK,IAAI,CAAC,CAAC;gBAC9BK,YAAY;oBACV,GAAId,eAAeS,KAAK,EAAEK,cAAc,CAAC,CAAC;oBAC1CC,WAAWC;gBACb;YACF;YAEA,MAAME,kBAAkBhC,UAAUa;YAClCG,gBAAgB;gBACd,GAAGF,cAAc;gBACjBP,aAAaA,YAAY0B,GAAG,CAAC,CAACC;oBAC5B,IAAIP,eAAe,CAACO,WAAWC,IAAI,CAAC,EAAE;wBACpC,MAAM,EAAEC,aAAa,EAAEC,uBAAuB,EAAE,GAAGhC,mBAAmB6B;wBACtEjB,0BAA0B;4BACxB,GAAGA,uBAAuB;4BAC1B,GAAGmB,aAAa;wBAClB;wBACA,OAAOC;oBACT;oBAEA,OAAOH;gBACT;gBACAlC,WAAW;uBACLc,eAAed,SAAS,IAAI,EAAE;oBAClCgC,gBAAgBM,QAAQ;oBACxBN,gBAAgBO,MAAM;oBACtBxC,YAAYc,aAAa2B,MAAM;iBAChC;gBACDC,MAAM;oBACJ,GAAI3B,eAAe2B,IAAI,IAAI,CAAC,CAAC;oBAC7BvC,cAAc;wBACZ,GAAGR,UAAUQ,cAAcY,eAAe2B,IAAI,EAAEvC,gBAAgB,CAAC,EAAE;oBACrE;gBACF;YACF;QACF;QAEAc,cAAc0B,MAAM,GAAG,OAAOC;YAC5B,IAAI7B,eAAe4B,MAAM,EAAE,MAAM5B,eAAe4B,MAAM,CAACC;YAEvD,IAAI,CAAC5B,aAAa;gBAChB4B,QAAQC,MAAM,CAACC,IAAI,CAAC,CAAC,gEAAgE,CAAC;gBACtF;YACF;YAEA,MAAM5C,KAAK0C,SAAS1B,yBAAyBJ,cAC1CiC,KAAK,CAAC,CAACC;gBACNC,QAAQD,KAAK,CAACA;gBACdJ,QAAQC,MAAM,CAACG,KAAK,CAAC,CAAC,mCAAmC,EAAEA,MAAM,CAAC;YACpE,GACCE,OAAO,CAAC;gBACP,IAAI,CAACpC,aAAaL,qBAAqB,EAAE;oBACvC0C,WAAW;wBACTP,QAAQC,MAAM,CAACO,IAAI,CAACxC;oBACtB,GAAG;gBACL;YACF;QACJ;QAEA,OAAOK;IACT;AAEF,SAASJ,eAAe,GAAE"}