{"version":3,"sources":["../../../src/providers/FieldProvider/FieldProvider.tsx"],"sourcesContent":["import React, { createContext, useEffect } from 'react'\r\n\r\nconst initialContext: {\r\n  path?: string\r\n  schemaPath?: string\r\n  type?: string\r\n} = {\r\n  type: undefined,\r\n  path: '',\r\n  schemaPath: '',\r\n}\r\n\r\nexport const FieldContext = createContext(initialContext)\r\n\r\nexport const FieldProvider = ({\r\n  children,\r\n  context,\r\n}: {\r\n  children: React.ReactNode\r\n  context: { path: string; schemaPath: unknown; type: unknown }\r\n}) => {\r\n  const [type, setType] = React.useState<string>()\r\n  const [path, setPath] = React.useState<string>()\r\n  const [schemaPath, setSchemaPath] = React.useState<string>()\r\n\r\n  useEffect(() => {\r\n    if (schemaPath !== context.schemaPath) {\r\n      setType(context.type as string)\r\n      setPath(context.path)\r\n      setSchemaPath(context.schemaPath as string)\r\n    }\r\n  }, [schemaPath, context])\r\n\r\n  return (\r\n    <FieldContext.Provider\r\n      value={{\r\n        type,\r\n        path,\r\n        schemaPath,\r\n      }}\r\n    >\r\n      {children}\r\n    </FieldContext.Provider>\r\n  )\r\n}\r\n"],"names":["React","createContext","useEffect","initialContext","type","undefined","path","schemaPath","FieldContext","FieldProvider","children","context","setType","useState","setPath","setSchemaPath","Provider","value"],"mappings":";AAAA,OAAOA,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAO;AAEvD,MAAMC,iBAIF;IACFC,MAAMC;IACNC,MAAM;IACNC,YAAY;AACd;AAEA,OAAO,MAAMC,6BAAeP,cAAcE,gBAAe;AAEzD,OAAO,MAAMM,gBAAgB,CAAC,EAC5BC,QAAQ,EACRC,OAAO,EAIR;IACC,MAAM,CAACP,MAAMQ,QAAQ,GAAGZ,MAAMa,QAAQ;IACtC,MAAM,CAACP,MAAMQ,QAAQ,GAAGd,MAAMa,QAAQ;IACtC,MAAM,CAACN,YAAYQ,cAAc,GAAGf,MAAMa,QAAQ;IAElDX,UAAU;QACR,IAAIK,eAAeI,QAAQJ,UAAU,EAAE;YACrCK,QAAQD,QAAQP,IAAI;YACpBU,QAAQH,QAAQL,IAAI;YACpBS,cAAcJ,QAAQJ,UAAU;QAClC;IACF,GAAG;QAACA;QAAYI;KAAQ;IAExB,qBACE,KAACH,aAAaQ,QAAQ;QACpBC,OAAO;YACLb;YACAE;YACAC;QACF;kBAECG;;AAGP,EAAC"}