{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type { JSONSchema } from 'openai/lib/jsonschema'\r\nimport type { Endpoint, Field, GroupField, PayloadRequest } from 'payload'\r\nimport type { CSSProperties, MouseEventHandler } from 'react'\r\n\r\nexport interface PluginConfigAccess {\r\n  settings?: ({ req }: {\r\n    req: PayloadRequest;\r\n  }) => Promise<boolean> | boolean;\r\n}\r\n\r\nexport interface PluginConfig {\r\n  access?: PluginConfigAccess\r\n  collections: {\r\n    [key: string]: boolean\r\n  }\r\n  debugging?: boolean\r\n  disableSponsorMessage?: boolean\r\n  editorConfig?: { nodes: JSONSchema[] }\r\n  fields?: Field[]\r\n  generatePromptOnInit?: boolean\r\n  generationModels?: ((defaultModels: GenerationModel[]) => GenerationModel[]) | GenerationModel[]\r\n  globals?: string[]\r\n  interfaceName?: string\r\n}\r\n\r\nexport interface GenerationModel {\r\n  fields: string[]\r\n  generateText?: (prompt: string, system: string) => Promise<string>\r\n  handler?: (prompt: string, options: any) => Promise<any>\r\n  id: string\r\n  name: string\r\n  output: 'audio' | 'file' | 'image' | 'json' | 'text' | 'video'\r\n  settings?: GroupField\r\n  supportsPromptOptimization?: boolean\r\n}\r\n\r\nexport interface GenerationConfig {\r\n  models: GenerationModel[]\r\n  provider: string\r\n}\r\n\r\nexport type GenerateTextarea<T = any> = (args: {\r\n  doc: T\r\n  locale?: string\r\n  options?: any\r\n}) => Promise<string> | string\r\n\r\nexport interface Instructions {\r\n  'collection-slug': string\r\n  id: string\r\n  'model-id': string\r\n  prompt: string\r\n}\r\n\r\nexport interface Endpoints {\r\n  textarea: Omit<Endpoint, 'root'>\r\n  upload: Omit<Endpoint, 'root'>\r\n}\r\n\r\nexport type ActionMenuItems =\r\n  | 'Compose'\r\n  | 'Expand'\r\n  | 'Proofread'\r\n  | 'Rephrase'\r\n  | 'Settings'\r\n  | 'Simplify'\r\n  | 'Summarize'\r\n  | 'Tone'\r\n  | 'Translate'\r\n\r\nexport type ActionMenuEvents =\r\n  | 'onCompose'\r\n  | 'onExpand'\r\n  | 'onProofread'\r\n  | 'onRephrase'\r\n  | 'onSettings'\r\n  | 'onSimplify'\r\n  | 'onSummarize'\r\n  | 'onTone'\r\n  | 'onTranslate'\r\n\r\nexport type UseMenuEvents = {\r\n  [key in ActionMenuEvents]?: (data?: unknown) => void\r\n}\r\n\r\nexport type UseMenuOptions = {\r\n  isConfigAllowed: boolean\r\n}\r\n\r\nexport type BaseItemProps<T = any> = {\r\n  children?: React.ReactNode\r\n  disabled?: boolean\r\n  hideIcon?: boolean\r\n  isActive?: boolean\r\n  isMenu?: boolean\r\n  onClick: (data?: unknown) => void\r\n  onMouseEnter?: MouseEventHandler<T> | undefined\r\n  onMouseLeave?: MouseEventHandler<T> | undefined\r\n  style?: CSSProperties | undefined\r\n  title?: string\r\n}\r\n"],"names":[],"mappings":"AAyFA,WAWC"}